# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from example.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyRecord

from rc import Rc
from rc_helper import RcHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from json_record import JsonRecord

class JsonRecordHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("struct DjinniOptionalRecordHandle *(struct DjinniRecordHandle *)")
    def get_json_record_f1(cself):
        try:
            return CPyRecord.fromPyOpt(Rc.c_data_set, CPyRecord.toPy(None, cself).optional_rc)
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniRecordHandle *(struct DjinniOptionalRecordHandle *)")
    def python_create_json_record(optional_rc):
        py_rec = JsonRecord(
            CPyRecord.toPyOpt(Rc.c_data_set, optional_rc))
        return CPyRecord.fromPy(JsonRecord.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in JsonRecord.c_data_set
        JsonRecord.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.json_record_add_callback_python_create_json_record(JsonRecordHelper.python_create_json_record)
        lib.json_record_add_callback_get_json_record_f1(JsonRecordHelper.get_json_record_f1)
        lib.json_record_add_callback___delete(JsonRecordHelper.__delete)

JsonRecordHelper._add_callbacks()

