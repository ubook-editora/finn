// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from example.djinni

#include <iostream> // for debugging
#include <cassert>
#include "wrapper_marshal.hpp"
#include "rc.hpp"

#include "dh__my_enum.hpp"
#include "dh__rc.hpp"
#include "my_enum.hpp"
#include <optional>
#include <vector>

static void(*s_py_callback_rc___delete)(DjinniRecordHandle * );
void rc_add_callback___delete(void(* ptr)(DjinniRecordHandle * )) {
    s_py_callback_rc___delete = ptr;
}

void rc___delete(DjinniRecordHandle * drh) {
    s_py_callback_rc___delete(drh);
}
void optional_rc___delete(DjinniOptionalRecordHandle * drh) {
    s_py_callback_rc___delete((DjinniRecordHandle *) drh); // can't static cast, find better way
}
static int32_t ( * s_py_callback_rc_get_rc_f1)(DjinniRecordHandle *);

void rc_add_callback_get_rc_f1(int32_t( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_rc_get_rc_f1 = ptr;
}

static int32_t ( * s_py_callback_rc_get_rc_f2)(DjinniRecordHandle *);

void rc_add_callback_get_rc_f2(int32_t( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_rc_get_rc_f2 = ptr;
}

static DjinniBoxedI32 * ( * s_py_callback_rc_get_rc_f3)(DjinniRecordHandle *);

void rc_add_callback_get_rc_f3(DjinniBoxedI32 *( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_rc_get_rc_f3 = ptr;
}

static int ( * s_py_callback_rc_get_rc_f4)(DjinniRecordHandle *);

void rc_add_callback_get_rc_f4(int( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_rc_get_rc_f4 = ptr;
}

static DjinniBinary * ( * s_py_callback_rc_get_rc_f5)(DjinniRecordHandle *);

void rc_add_callback_get_rc_f5(DjinniBinary *( * ptr)(DjinniRecordHandle *)) {
    s_py_callback_rc_get_rc_f5 = ptr;
}

static DjinniRecordHandle * ( * s_py_callback_rc_python_create_rc)(int32_t, int32_t, DjinniBoxedI32 *, int, DjinniBinary *);

void rc_add_callback_python_create_rc(DjinniRecordHandle *( * ptr)(int32_t, int32_t, DjinniBoxedI32 *, int, DjinniBinary *)) {
    s_py_callback_rc_python_create_rc = ptr;
}

djinni::Handle<DjinniRecordHandle> DjinniRc::fromCpp(const ::textsort::Rc& dr) {
    auto  _field_c = DjinniBoxedI32::fromCpp(dr.c);
    auto  _field_e = DjinniBinary::fromCpp(dr.e);

    djinni::Handle<DjinniRecordHandle> _aux(
        s_py_callback_rc_python_create_rc(
            dr.a,
            dr.b,
            _field_c.release(),
            int32_from_enum_my_enum(dr.d),
            _field_e.release()),
        rc___delete);
    return _aux;
}

::textsort::Rc DjinniRc::toCpp(djinni::Handle<DjinniRecordHandle> dh) {
    std::unique_ptr<DjinniBoxedI32> _field_c(s_py_callback_rc_get_rc_f3(dh.get()));
    std::unique_ptr<DjinniBinary> _field_e(s_py_callback_rc_get_rc_f5(dh.get()));

    auto _aux = ::textsort::Rc(
        s_py_callback_rc_get_rc_f1(dh.get()),
        s_py_callback_rc_get_rc_f2(dh.get()),
        DjinniBoxedI32::toCpp(std::move( _field_c)),
        static_cast<::textsort::my_enum>(s_py_callback_rc_get_rc_f4(dh.get())),
        DjinniBinary::toCpp(std::move( _field_e)));
    return _aux;
}

djinni::Handle<DjinniOptionalRecordHandle> DjinniRc::fromCpp(std::optional<::textsort::Rc> dc) {
    if (dc == std::nullopt) {
        return nullptr;
    }
    return djinni::optionals::toOptionalHandle(DjinniRc::fromCpp(std::move(* dc)), optional_rc___delete);
}

std::optional<::textsort::Rc>DjinniRc::toCpp(djinni::Handle<DjinniOptionalRecordHandle> dh) {
     if (dh) {
        return std::optional<::textsort::Rc>(DjinniRc::toCpp(djinni::optionals::fromOptionalHandle(std::move(dh), rc___delete)));
    }
    return std::nullopt;
}

