// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from example.djinni

#import "Hello+Private.h"
#import "Hello.h"
#import "MyEnum+Private.h"
#import "MyRecord+Private.h"
#import <Djinni/DJICppWrapperCache+Private.h>
#import <Djinni/DJIError.h>
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface Hello ()

- (id)initWithCpp:(const std::shared_ptr<::textsort::Hello>&)cppRef;

@end

@implementation Hello {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::textsort::Hello>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::textsort::Hello>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable Hello *)create {
    try {
        auto objcpp_result_ = ::textsort::Hello::create();
        return ::djinni_generated::HelloHelper::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (MyEnum)sayHi {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->say_hi();
        return ::djinni::Enum<::textsort::my_enum, MyEnum>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull MyRecord *)print:(nonnull MyRecord *)rc {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->print(::djinni_generated::MyRecordHelper::toCpp(rc));
        return ::djinni_generated::MyRecordHelper::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto HelloHelper::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto HelloHelper::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<Hello>(cpp);
}

}  // namespace djinni_generated

@end
